<!DOCTYPE html>
<html>
<f:view xmlns="http://www.w3.org/1999/xhtml"
        xmlns:f="http://java.sun.com/jsf/core"
        xmlns:h="http://java.sun.com/jsf/html"
        xmlns:p="http://primefaces.org/ui"
        xmlns:ui="http://java.sun.com/jsf/facelets">

    <h:head>
        <title>TFlow Editor</title>

        <meta charset="utf-8"/>
        <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>

        <h:outputStylesheet library="css" name="editor.css#{editorCtl.forceReloadResources}" target="head"/>
    </h:head>
    <h:body>
        <h:outputStylesheet library="css" name="tflow.css#{editorCtl.forceReloadResources}" target="head"/>
        <h:outputScript library="js" name="editor.js#{editorCtl.forceReloadResources}" target="head"/>
        <f:event type="preRenderComponent" listener="#{editorCtl.preRenderComponent}"/>

        <p:remoteCommand name="refreshProperties" action="#{editorCtl.refreshProperties}" update="propertyForm"/>
        <p:remoteCommand name="refreshElement" action="#{editorCtl.updateComponent}" oncomplete="tflow.postRefreshElement();"/>
        <p:remoteCommand name="notification" action="#{editorCtl.showNoti}"/>
        <p:remoteCommand name="propertiesAppend" action="#{editorCtl.propertiesAppend}"/>

        <script>console.log('-- first-line of editor --');</script>
        <div class="container">
            <ui:include src="resources/ajaxexception.xhtml">
                <ui:param name="controller" value="#{editorCtl}"/>
            </ui:include>
            <ui:include src="resources/topMenu.xhtml"/>
            <p:outputPanel id="screen-area" class="screen-area">
                <div class="screen-blocker" style="display: none;">
                    <div style="font-size:var(--font-size-1);color:var(--surface-c)">
                        <i class="pi pi-spinner pi-spin"></i>
                        <span class="screen-block-text">please wait ...</span>
                    </div>
                </div>
                <p:splitter styleClass="p-mb-3" gutterSize="5">
                    <p:splitterPanel styleClass="left-panel p-d-flex p-ai-center p-jc-center" minSize="15" size="15">
                        <p:panel header="Step List" styleClass="tool-panel">
                            <f:facet name="actions">
                                <p:commandButton id="leftToggle" type="button"
                                                 styleClass="left-panel-toggle close"
                                                 icon="pi pi-times"/>
                            </f:facet>
                            <h:form id="stepForm">
                                <p:tabView id="leftPanel" activeIndex="#{editorCtl.stepListActiveTab}">
                                    <p:tab title="Step" id="stepList">
                                        <p:outputPanel styleClass="vertical-scroll-panel">
                                            <p:menu model="#{editorCtl.stepMenu}"/>
                                        </p:outputPanel>
                                    </p:tab>
                                    <p:tab title="History" id="actionList">
                                        <p:scrollPanel style="height: 100%;">
                                            <div>
                                                <p:outputLabel value="Show full action list: "/>
                                                <p:inputSwitch value="#{editorCtl.fullActionList}" onLabel="1" offLabel="0" styleClass="float-right">
                                                    <p:ajax event="change" listener="#{editorCtl.refreshActionList}" update="@parent"/>
                                                </p:inputSwitch>
                                            </div>
                                            <p:repeat value="#{editorCtl.actionList}" var="action">
                                                <p:outputPanel class="column">
                                                    <p:graphicImage library="images" name="#{action.image}"/>
                                                    <div style="display: inline-block">
                                                        <p:outputLabel id="actionName" value="#{action.name}"/>
                                                        <p:tooltip for="actionName" value="#{action.description}"/>
                                                    </div>
                                                    <br/>
                                                    <p:outputLabel value="(#{action.code}:#{action.id})" rendered="#{not editorCtl.fullActionList}"/>
                                                    <p:commandButton value="Undo" action="#{editorCtl.undo(action)}" rendered="#{action.undo and not editorCtl.fullActionList}" styleClass="float-right" update="@parent" onstart="serverStart()" oncomplete="serverEnd()"/>
                                                </p:outputPanel>
                                            </p:repeat>
                                        </p:scrollPanel>
                                    </p:tab>
                                    <p:ajax event="tabChange" listener="#{editorCtl.stepListTabChanged}"/>
                                </p:tabView>
                                <p:remoteCommand name="setActiveObj" action="#{editorCtl.selectObject}" update="propertyForm"/>
                                <p:remoteCommand name="setToolPanel" action="#{editorCtl.setToolPanel}" update="stepForm,propertyForm"/>
                            </h:form>
                        </p:panel>
                    </p:splitterPanel>

                    <p:splitterPanel styleClass="main-panel p-d-flex p-ai-center p-jc-center" minSize="15" size="55">
                        <p:panel header="" styleClass="tool-panel">
                            <f:facet name="actions">
                                <h:form id="actionForm">
                                    <ui:include src="#{editorCtl.editorType.menu}"/>
                                </h:form>
                            </f:facet>

                            <iframe id="flowchart" src="#{editorCtl.editorType.page}"></iframe>

                        </p:panel>
                    </p:splitterPanel>

                    <p:splitterPanel styleClass="right-panel p-d-flex p-ai-center p-jc-center" minSize="15" size="30">
                        <p:panel header="Property List" styleClass="tool-panel">
                            <f:facet name="actions">
                                <p:commandButton id="rightToggle" type="button" styleClass="right-panel-toggle close" icon="pi pi-times"/>
                            </f:facet>

                            <h:form id="propertyForm">
                                <p:tooltip widgetVar="propertiesToolTip" globalSelector="label,:input" position="top"/>
                                <p:outputPanel id="scrollPanel" styleClass="properties vertical-scroll-panel fit-width">
                                    <p:importEnum type="com.tflow.model.editor.PropertyType" var="PropertyType"/>
                                    <input name="selectableId" value="#{editorCtl.activeObject.selectableId}" class="hidden-input"/>
                                    <input value="" class="ui-g-8 prev-input"/>

                                    <p:repeat value="#{editorCtl.propertyList}" var="prop">

                                        <p:outputPanel rendered="#{PropertyType.TITLE==prop.type}">
                                            <b class="title">#{prop.var}</b><br/>
                                            <sub class="description">#{prop.label}</sub>
                                            <div class="debug" style="font-size:8px !important;color:gray;">#{prop}</div>
                                        </p:outputPanel>

                                        <p:divider rendered="#{PropertyType.SEPARATOR==prop.type}" align="left">
                                            <span>#{prop.label}</span>
                                        </p:divider>

                                        <!--TODO: all p:inputText need key-filter by PropertyType.parameter-->

                                        <p:outputPanel styleClass="ui-g #{prop.var}" rendered="#{PropertyType.READONLY==prop.type}">
                                            <p:outputLabel class="ui-g-4 property-label#{editorCtl.disabledClass(prop)}" rendered="#{prop.label != null}">#{prop.label}</p:outputLabel>
                                            <p:outputLabel class="#{prop.label != null?'ui-g-8':'fit-width'} property-label#{editorCtl.disabledClass(prop)}">#{prop.oldValue=prop.hasParent()?editorCtl.activeObject[prop.varParent][prop.var]:editorCtl.activeObject[prop.var]}</p:outputLabel>
                                        </p:outputPanel>

                                        <p:outputPanel styleClass="ui-g #{prop.var}" rendered="#{PropertyType.TOSTRING==prop.type}">
                                            <p:outputLabel styleClass="ui-g-12 property-label#{editorCtl.disabledClass(prop)}" rendered="#{prop.label != null}">#{prop.label}</p:outputLabel>
                                            <p:outputLabel styleClass="ui-g-12 property-label#{editorCtl.disabledClass(prop)}">#{editorCtl.activeObject.toString()}</p:outputLabel>
                                        </p:outputPanel>

                                        <p:outputPanel styleClass="ui-g #{prop.var}" rendered="#{PropertyType.STRING==prop.type}">
                                            <p:outputLabel class="ui-g-4 property-label#{editorCtl.disabledClass(prop)}" rendered="#{prop.label != null}">#{prop.label}</p:outputLabel>
                                            <span class="hidden">#{prop.oldValue=prop.hasParent()?editorCtl.activeObject[prop.varParent][prop.var]:editorCtl.activeObject[prop.var]}</span>
                                            <p:inputText maxlength="#{prop.params[0]==null?1024:prop.params[0]}" value="#{prop.hasParent()?editorCtl.activeObject[prop.varParent][prop.var]:editorCtl.activeObject[prop.var]}" disabled="#{editorCtl.disabled(prop)}" styleClass="#{prop.label != null?'ui-g-8':'fit-width'}">
                                                <p:keyFilter inputRegEx="#{prop.params[1]==null?'/./i':prop.params[1]}"/>
                                                <p:ajax event="change" listener="#{editorCtl.propertyChanged(prop)}" onsuccess="updateEm('#{editorCtl.activeObject.selectableId}');#{prop.javaScript}" process="@this" update="#{prop.update}"/>
                                            </p:inputText>
                                        </p:outputPanel>

                                        <p:outputPanel styleClass="ui-g #{prop.var}" rendered="#{PropertyType.PASSWORD==prop.type}">
                                            <p:outputLabel class="ui-g-4 property-label#{editorCtl.disabledClass(prop)}" rendered="#{prop.label != null}">#{prop.label}</p:outputLabel>
                                            <p:password placeholder="#{editorCtl.masked(prop.hasParent()?editorCtl.activeObject[prop.varParent][prop.var]:editorCtl.activeObject[prop.var])}" maxlength="#{prop.params[0]}" feedback="true" required="true" value="#{prop.hasParent()?editorCtl.activeObject[prop.varParent][prop.var]:editorCtl.activeObject[prop.var]}" promptLabel="#{prop.params[1]==null?prop.label:prop.params[1]}" disabled="#{editorCtl.disabled(prop)}" styleClass="#{prop.label != null?'ui-g-8':'fit-width'}">
                                                <p:ajax event="change" listener="#{editorCtl.propertyChanged(prop)}" onsuccess="updateEm('#{editorCtl.activeObject.selectableId}');#{prop.javaScript}" process="@this" update="#{prop.update}"/>
                                            </p:password>
                                        </p:outputPanel>

                                        <p:outputPanel styleClass="ui-g #{prop.var}" rendered="#{PropertyType.DYNAMICVALUE==prop.type}">
                                            <p:outputLabel class="ui-g-4 property-label#{editorCtl.disabledClass(prop)}" rendered="#{prop.label != null}">#{prop.label}</p:outputLabel>
                                            <span class="hidden">#{prop.oldValue=prop.hasParent()?editorCtl.activeObject[prop.varParent][prop.var]:editorCtl.activeObject[prop.var]}</span>
                                            <p:inputText value="#{prop.hasParent()?editorCtl.activeObject[prop.varParent][prop.var]:editorCtl.activeObject[prop.var]}" disabled="#{editorCtl.disabled(prop)}" styleClass="#{prop.label != null?'ui-g-8':'fit-width'}">
                                                <!--TODO: need button to open Dynamic Value Expression Editor(Helper like PowerScript)-->
                                                <p:ajax event="change" listener="#{editorCtl.propertyChanged(prop)}" onsuccess="updateEm('#{editorCtl.activeObject.selectableId}');#{prop.javaScript}" process="@this" update="#{prop.update}"/>
                                            </p:inputText>
                                        </p:outputPanel>

                                        <p:outputPanel styleClass="ui-g #{prop.var}" rendered="#{PropertyType.BOOLEAN==prop.type}">
                                            <div class="ui-g-10 property-label#{editorCtl.disabledClass(prop)}">#{prop.label}</div>
                                            <span class="hidden">#{prop.oldValue=prop.hasParent()?editorCtl.activeObject[prop.varParent][prop.var]:editorCtl.activeObject[prop.var]}</span>
                                            <div class="ui-g-2"><span style="display:none">#{prop.oldValue=prop.hasParent()?editorCtl.activeObject[prop.varParent][prop.var]:editorCtl.activeObject[prop.var]}</span>
                                                <p:inputSwitch value="#{prop.hasParent()?editorCtl.activeObject[prop.varParent][prop.var]:editorCtl.activeObject[prop.var]}" disabled="#{editorCtl.disabled(prop)}">
                                                    <p:ajax event="change" listener="#{editorCtl.propertyChanged(prop)}" onsuccess="updateEm('#{editorCtl.activeObject.selectableId}');#{prop.javaScript}" process="@this" update="#{prop.update}"/>
                                                </p:inputSwitch>
                                            </div>
                                        </p:outputPanel>

                                        <p:outputPanel styleClass="ui-g" rendered="#{PropertyType.NUMBER==prop.type}">
                                            <div class="ui-g-4 property-label#{editorCtl.disabledClass(prop)}">#{prop.label}</div>
                                            <div class="ui-g-8 ui-nopad">
                                                <p:inputNumber maxValue="#{prop.params[0]}" minValue="#{prop.params[1]}" decimalPlaces="#{prop.params[2]}" thousandSeparator="#{prop.params[3]}" value="#{prop.hasParent()?editorCtl.activeObject[prop.varParent][prop.var]:editorCtl.activeObject[prop.var]}" disabled="#{editorCtl.disabled(prop)}" styleClass="fit-width">
                                                    <p:ajax event="change" listener="#{editorCtl.propertyChanged(prop)}" onsuccess="updateEm('#{editorCtl.activeObject.selectableId}');#{prop.javaScript}" process="@this" update="#{prop.update}"/>
                                                </p:inputNumber>
                                            </div>
                                        </p:outputPanel>

                                        <p:outputPanel styleClass="ui-g #{prop.var}" rendered="#{PropertyType.INT==prop.type}">
                                            <div class="ui-g-4 property-label#{editorCtl.disabledClass(prop)}">#{prop.label}</div>
                                            <span class="hidden">#{prop.oldValue=prop.hasParent()?editorCtl.activeObject[prop.varParent][prop.var]:editorCtl.activeObject[prop.var]}</span>
                                            <div class="ui-g-8 ui-nopad">
                                                <p:spinner max="#{prop.params[0]}" min="#{prop.params[1]}" value="#{prop.hasParent()?editorCtl.activeObject[prop.varParent][prop.var]:editorCtl.activeObject[prop.var]}" disabled="#{editorCtl.disabled(prop)}" styleClass="fit-width">
                                                    <p:ajax event="change" listener="#{editorCtl.propertyChanged(prop)}" onsuccess="updateEm('#{editorCtl.activeObject.selectableId}');#{prop.javaScript}" process="@this" update="#{prop.update}"/>
                                                </p:spinner>
                                            </div>
                                        </p:outputPanel>

                                        <p:outputPanel styleClass="ui-g #{prop.var}" rendered="#{PropertyType.STRINGARRAY==prop.type}">
                                            <div class="ui-g-4 property-label#{editorCtl.disabledClass(prop)}">#{prop.label}</div>
                                            <span class="hidden">#{prop.oldValue=prop.hasParent()?editorCtl.activeObject[prop.varParent][prop.var]:editorCtl.activeObject[prop.var]}</span>
                                            <p:inputTextarea value="#{prop.hasParent()?editorCtl.activeObject[prop.varParent][prop.var]:editorCtl.activeObject[prop.var]}" converter="StringArray" converterParam="#{prop.params[0]}" disabled="#{editorCtl.disabled(prop)}" styleClass="ui-g-8">
                                                <p:ajax event="change" listener="#{editorCtl.propertyChanged(prop)}" onsuccess="updateEm('#{editorCtl.activeObject.selectableId}');#{prop.javaScript}" process="@this" update="#{prop.update}"/>
                                            </p:inputTextarea>
                                        </p:outputPanel>

                                        <p:outputPanel styleClass="ui-g #{prop.var}" rendered="#{PropertyType.COLUMNLIST==prop.type}">
                                            <div class="ui-g-4 property-label#{editorCtl.disabledClass(prop)}">#{prop.label}</div>
                                            <span class="hidden">#{prop.oldValue=prop.hasParent()?editorCtl.activeObject[prop.varParent][prop.var]:editorCtl.activeObject[prop.var]}</span>
                                            <p:outputPanel styleClass="ui-g-8 ui-nopad">
                                                <p:chips value="#{prop.hasParent()?editorCtl.activeObject[prop.varParent][prop.var]:editorCtl.activeObject[prop.var]}" addOnBlur="true" disabled="#{editorCtl.disabled(prop)}" title="Use X button to remove unwanted columns" styleClass="#{prop.var}">
                                                    <p:ajax event="itemUnselect" listener="#{editorCtl.columnListUnselect}" onsuccess="updateEm('#{editorCtl.activeObject.selectableId}');#{prop.javaScript}" process="@this" update="#{prop.update}"/>
                                                    <p:ajax event="itemSelect" listener="#{editorCtl.columnListSelect}" process="@this" update="@this"/>
                                                </p:chips>
                                                <p:commandLink value="Add all again" actionListener="#{editorCtl.initColumnList(prop)}" onsuccess="updateEm('#{editorCtl.activeObject.selectableId}');#{prop.javaScript}" disabled="#{editorCtl.disabled(prop)}" process="@this" update="#{prop.update}" styleClass="fit-width"/>
                                            </p:outputPanel>
                                        </p:outputPanel>

                                        <p:outputPanel styleClass="ui-g #{prop.var}" rendered="#{prop.type.isItemList()}">
                                            <div class="ui-g-4 property-label#{editorCtl.disabledClass(prop)}">#{prop.label}</div>
                                            <span style="display:none">#{prop.oldValue=prop.hasParent()?editorCtl.activeObject[prop.varParent][prop.var]:editorCtl.activeObject[prop.var]}</span>
                                            <p:selectOneMenu value="#{prop.hasParent()?editorCtl.activeObject[prop.varParent][prop.var]:editorCtl.activeObject[prop.var]}" disabled="#{editorCtl.disabled(prop)}" styleClass="ui-g-8" rendered="#{editorCtl.isEmpty(prop.hasParent()?editorCtl.activeObject[prop.varParent][prop.var]:editorCtl.activeObject[prop.var])}">
                                                <f:selectItem itemLabel="---- select -----" itemValue=""/>
                                                <f:selectItems value="#{editorCtl.getItemList(prop,editorCtl.activeObject.selectableId)}" var="item" itemLabel="#{item.label}" itemValue="#{item.value}"/>
                                                <p:ajax event="change" listener="#{editorCtl.propertyChanged(prop)}" onsuccess="updateEm('#{editorCtl.activeObject.selectableId}');#{prop.javaScript}" process="@this" update="topForm:notiMsg #{prop.update}"/>
                                            </p:selectOneMenu>
                                            <p:selectOneMenu value="#{prop.hasParent()?editorCtl.activeObject[prop.varParent][prop.var]:editorCtl.activeObject[prop.var]}" disabled="#{editorCtl.disabled(prop)}" styleClass="ui-g-8" rendered="#{not editorCtl.isEmpty(prop.hasParent()?editorCtl.activeObject[prop.varParent][prop.var]:editorCtl.activeObject[prop.var])}">
                                                <f:selectItems value="#{editorCtl.getItemList(prop,editorCtl.activeObject.selectableId)}" var="item" itemLabel="#{item.label}" itemValue="#{item.value}"/>
                                                <p:ajax event="change" listener="#{editorCtl.propertyChanged(prop)}" onsuccess="updateEm('#{editorCtl.activeObject.selectableId}');#{prop.javaScript}" process="@this" update="topForm:notiMsg #{prop.update}"/>
                                            </p:selectOneMenu>
                                        </p:outputPanel>

                                        <p:outputPanel styleClass="ui-g #{prop.var}" rendered="#{PropertyType.PROPERTIES==prop.type}">
                                            <script>
                                                function propAppend(cfg, event, propertyVar) {
                                                    if (event.key === 'Enter') {
                                                        propertiesAppend([
                                                            {name: "propertyVar", value: propertyVar}
                                                        ]);
                                                    }
                                                }
                                            </script>
                                            <p:divider align="left">
                                                <span>#{prop.label} (#{prop.hasParent()?editorCtl.activeObject[prop.varParent][prop.var].size():editorCtl.activeObject[prop.var].size()})</span>
                                            </p:divider>
                                            <p:dataTable value="#{prop.hasParent()?editorCtl.activeObject[prop.varParent][prop.var]:editorCtl.activeObject[prop.var]}" var="property" disabled="#{editorCtl.disabled(prop)}">
                                                <p:column width="1em" headerText="">
                                                    <p:outputLabel value="#{property.index + 1}"/>
                                                </p:column>

                                                <p:column headerText="#{prop.params[0]}">
                                                    <p:inputText title="press Enter to add new #{prop.params[0]} below" maxlength="80" value="#{property.name}" styleClass="fit-width#{property.last and editorCtl.focusOnLastProperties?' focus':''}" rendered="#{property.last and prop.params[2]}">
                                                        <p:ajax event="change" listener="#{editorCtl.propertyChanged(prop)}" onsuccess="updateEm('#{editorCtl.activeObject.selectableId}');#{prop.javaScript}" process="@this" update="#{prop.update}"/>
                                                        <p:ajax event="keypress" onstart="propAppend(cfg,event,'#{prop.var}');"/>
                                                    </p:inputText>
                                                    <p:inputText maxlength="80" value="#{property.name}" styleClass="fit-width#{property.last and editorCtl.focusOnLastProperties?' focus':''}" disabled="#{not prop.params[2]}" rendered="#{not property.last or not prop.params[2]}">
                                                        <p:ajax event="change" listener="#{editorCtl.propertyChanged(prop)}" onsuccess="updateEm('#{editorCtl.activeObject.selectableId}');#{prop.javaScript}" process="@this" update="#{prop.update}"/>
                                                    </p:inputText>
                                                </p:column>

                                                <p:column headerText="#{prop.params[1]}">
                                                    <p:inputText title="press Enter to add new #{prop.params[0]} below" maxlength="120" value="#{property.value}" styleClass="fit-width" rendered="#{property.last and prop.params[2]}" onfocus="PF('propertiesToolTip').show();">
                                                        <p:ajax event="change" listener="#{editorCtl.propertyChanged(prop)}" onsuccess="updateEm('#{editorCtl.activeObject.selectableId}');#{prop.javaScript}" process="@this" update="#{prop.update}"/>
                                                        <p:ajax event="keypress" onstart="propAppend(cfg,event,'#{prop.var}');"/>
                                                    </p:inputText>
                                                    <p:inputText maxlength="120" value="#{property.value}" styleClass="fit-width" rendered="#{not property.last or not prop.params[2]}">
                                                        <p:ajax event="change" listener="#{editorCtl.propertyChanged(prop)}" onsuccess="updateEm('#{editorCtl.activeObject.selectableId}');#{prop.javaScript}" process="@this" update="#{prop.update}"/>
                                                    </p:inputText>
                                                </p:column>

                                                <p:column width="1em" rendered="#{prop.params[2]}">
                                                    <p:commandLink><!--rendered="#{property.last and (prop.hasParent()?editorCtl.activeObject[prop.varParent][prop.var].size():editorCtl.activeObject[prop.var].size()) gt 1}"-->
                                                        <span class="ui-icon pi pi-minus-circle"/>
                                                        <p:ajax event="click" listener="#{editorCtl.propertiesRemove(prop, property.index)}" onsuccess="updateEm('#{editorCtl.activeObject.selectableId}');#{prop.javaScript}" process="@this" update="#{prop.update}"/>
                                                    </p:commandLink>
                                                </p:column>
                                            </p:dataTable>
                                        </p:outputPanel>

                                        <p:outputPanel styleClass="ui-g #{prop.var}" rendered="#{PropertyType.UPLOAD==prop.type}">
                                            <div class="ui-g-4 property-label#{editorCtl.disabledClass(prop)}">#{prop.label}</div>
                                            <p:outputPanel styleClass="ui-g-8 fileupload ui-inputfield ui-inputtext ui-widget ui-state-default ui-corner-all ui-state-filled">
                                                <p:outputLabel styleClass="#{editorCtl.disabledClass(prop)}" title="click button to upload file" value="#{prop.hasParent()?editorCtl.activeObject[prop.varParent][prop.var]:editorCtl.activeObject[prop.var]}"/>
                                                <p:fileUpload styleClass="#{prop.var}" listener="#{editorCtl.uploadBinaryFile}" onupload="blockScreen();" allowTypes="#{editorCtl.activeObject[prop.params[0]].allowTypes}" validateContentType="true" performVirusScan="true" mode="simple" skinSimple="true" chooseIcon="pi pi-ellipsis-h" label="" title="" auto="true" update="@parent topForm:notiMsg" onvalidationfailure="warning('#{prop.params[2]}');" onerror="warning('#{prop.params[2]}');" oncomplete="updateEm('#{editorCtl.activeObject.selectableId}');#{prop.javaScript}" process="@this" disabled="#{editorCtl.disabled(prop)}"/>
                                            </p:outputPanel>
                                        </p:outputPanel>

                                        <p:outputPanel styleClass="ui-g #{prop.var}" rendered="#{PropertyType.BUTTON==prop.type}" style="padding:var(--padding)">
                                            <p:commandButton id="propButton" value="#{prop.label}" disabled="#{editorCtl.disabled(prop)}" actionListener="#{editorCtl[prop.params[0]](prop)}" oncomplete="#{prop.javaScript}" process="@this" update="#{prop.update}"/>
                                            <p:blockUI id="propButtonBUI" trigger="propButton" block="screen-area">
                                                <div style="font-size:var(--font-size-1);color:var(--surface-c)">
                                                    <i class="pi pi-spinner pi-spin"></i>
                                                    <span style="text-transform:uppercase">#{prop.label} ...</span>
                                                </div>
                                            </p:blockUI>
                                        </p:outputPanel>

                                    </p:repeat>

                                    <input value="" class="ui-g-8 next-input"/>
                                </p:outputPanel>
                                <script>contentReady(propertyCreated, 'propertyCreated');</script>
                            </h:form>
                        </p:panel>
                    </p:splitterPanel>
                </p:splitter>
            </p:outputPanel>
        </div>
        <input name="page" value="#{editorCtl.editorType.page}" class="hidden-input"/>
        <script>console.log('-- last-line of editor --');</script>
    </h:body>
</f:view>
</html>
